import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const spotifyApi = createApi({
  reducerPath: 'spotifyApi',
  baseQuery: fetchBaseQuery({
    baseUrl: 'https://spotify23.p.rapidapi.com/',
    prepareHeaders: (headers) => {
      headers.set('X-RapidAPI-Key', import.meta.env.VITE_SPOTIFY_RAPID_API_KEY);

      return headers;
    },
  }),
  endpoints: (builder) => ({
    getSearch: builder.query({ query: () => 'v1/search' }),
    getAlbums: builder.query({ query: () => 'v1/albums' }),
    getAlbumTracks: builder.query({ query: (albumId) => `v1/albums/${albumId}/tracks` }),
    getAlbumMetadata: builder.query({ query: (albumId) => `v1/albums/${albumId}` }),
    getArtists: builder.query({ query: () => 'v1/artists' }),
    getArtistOverview: builder.query({ query: (artistId) => `v1/artists/${artistId}/overview` }),
    getArtistDiscography: builder.query({ query: (artistId) => `v1/artists/${artistId}/discography` }),
    getArtistAlbums: builder.query({ query: (artistId) => `v1/artists/${artistId}/albums` }),
    getArtistSingles: builder.query({ query: (artistId) => `v1/artists/${artistId}/singles` }),
    getArtistAppearsOn: builder.query({ query: (artistId) => `v1/artists/${artistId}/appears-on` }),
    getArtistDiscoveredOn: builder.query({ query: (artistId) => `v1/artists/${artistId}/discovered-on` }),
    getArtistFeaturing: builder.query({ query: (artistId) => `v1/artists/${artistId}/featuring` }),
    getArtistRelated: builder.query({ query: (artistId) => `v1/artists/${artistId}/related` }),
    getTracks: builder.query({ query: () => 'v1/tracks' }),
    getTrackCredits: builder.query({ query: (trackId) => `v1/tracks/${trackId}/credits` }),
    getTrackLyrics: builder.query({ query: (trackId) => `v1/tracks/${trackId}/lyrics` }),
    getTrackRecommendations: builder.query({ query: (trackId) => `v1/tracks/${trackId}/recommendations` }),
    getPlaylists: builder.query({ query: () => 'v1/playlists' }),
    getPlaylistTracks: builder.query({ query: (playlistId) => `v1/playlists/${playlistId}/tracks` }),
    getGenres: builder.query({ query: () => 'v1/genres' }),
    getPodcastEpisodes: builder.query({ query: (podcastId) => `v1/podcasts/${podcastId}/episodes` }),
    getEpisode: builder.query({ query: (episodeId) => `v1/episodes/${episodeId}` }),
    getEpisodeSound: builder.query({ query: (episodeId) => `v1/episodes/${episodeId}/sound` }),
    getUserProfile: builder.query({ query: (userId) => `v1/users/${userId}` }),
    getUserFollowers: builder.query({ query: (userId) => `v1/users/${userId}/followers` }),
    getRadioPlaylist: builder.query({ query: () => 'v1/radio/playlist' }),
    getConcerts: builder.query({ query: () => 'v1/concerts' }),
    getConcert: builder.query({ query: (concertId) => `v1/concerts/${concertId}` }),
  }),
});

export const {
  useGetSearchResultsQuery,
  useGetAlbumsQuery,
  useGetAlbumTracksQuery,
  useGetAlbumMetadataQuery,
  useGetArtistsQuery,
  useGetArtistOverviewQuery,
  useGetArtistDiscographyQuery,
  useGetArtistAlbumsQuery,
  useGetArtistSinglesQuery,
  useGetArtistAppearsOnQuery,
  useGetArtistDiscoveredOnQuery,
  useGetArtistFeaturingQuery,
  useGetArtistRelatedQuery,
  useGetTracksQuery,
  useGetTrackCreditsQuery,
  useGetTrackLyricsQuery,
  useGetTrackRecommendationsQuery,
  useGetPlaylistsQuery,
  useGetPlaylistTracksQuery,
  useGetGenresQuery,
  useGetPodcastEpisodesQuery,
  useGetEpisodeQuery,
  useGetEpisodeSoundQuery,
  useGetUserProfileQuery,
  useGetUserFollowersQuery,
  useGetRadioPlaylistQuery,
  useGetConcertsQuery,
  useGetConcertQuery,
} = spotifyApi;
